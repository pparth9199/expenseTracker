{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.createAnimatedDebug=createAnimatedDebug;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _invariant=_interopRequireDefault(require(\"fbjs/lib/invariant\"));var _val=require(\"../val\");var _AnimatedBlock=require(\"./AnimatedBlock\");var _AnimatedCall=require(\"./AnimatedCall\");var _AnimatedNode2=_interopRequireDefault(require(\"./AnimatedNode\"));function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var AnimatedDebug=function(_AnimatedNode){(0,_inherits2.default)(AnimatedDebug,_AnimatedNode);var _super=_createSuper(AnimatedDebug);function AnimatedDebug(message,value){var _this;(0,_classCallCheck2.default)(this,AnimatedDebug);(0,_invariant.default)(typeof message==='string',\"Reanimated: Animated.debug node first argument should be of type string but got \".concat(message));(0,_invariant.default)(value instanceof _AnimatedNode2.default,\"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \".concat(value));_this=_super.call(this,{type:'debug',message:message,value:value},[value]);_defineProperty((0,_assertThisInitialized2.default)(_this),\"_message\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"_value\",void 0);_this._message=message;_this._value=value;return _this;}(0,_createClass2.default)(AnimatedDebug,[{key:\"toString\",value:function toString(){return\"AnimatedDebug, id: \".concat(this.__nodeID);}},{key:\"__onEvaluate\",value:function __onEvaluate(){var value=(0,_val.val)(this._value);console.log(this._message,value);return value;}}]);return AnimatedDebug;}(_AnimatedNode2.default);function createAnimatedDebug(message,value){if(__DEV__){var runningInRemoteDebugger=typeof atob!=='undefined';var runningInExpoShell=global.Expo&&global.Expo.Constants.appOwnership!=='standalone';if(runningInRemoteDebugger||runningInExpoShell){return(0,_AnimatedBlock.createAnimatedBlock)([(0,_AnimatedCall.createAnimatedCall)([value],function(_ref){var _ref2=(0,_slicedToArray2.default)(_ref,1),a=_ref2[0];return console.log(\"\".concat(message,\" \").concat(a));}),value]);}else{return new AnimatedDebug(message,(0,_AnimatedBlock.adapt)(value));}}return value;}","map":{"version":3,"sources":["AnimatedDebug.js"],"names":["constructor","invariant","value","type","message","val","console","runningInRemoteDebugger","runningInExpoShell","global","block","call","adapt"],"mappings":"81BAAA,qEACA,2BACA,8CACA,4CACA,qE,44BAEA,CAAA,a,oHAIEA,uBAAW,OAAXA,CAAW,KAAXA,CAA4B,4DAC1BC,uBACE,MAAA,CAAA,OAAA,GADO,QAATA,CAAS,mFAAA,MAAA,CAATA,OAAS,CAATA,EAIAA,uBACEC,KAAK,WADE,uBAATD,CAAS,0FAAA,MAAA,CAATA,KAAS,CAATA,EAIA,uBAAM,CAAEE,IAAI,CAAN,OAAA,CAAiBC,OAAjB,CAAiBA,OAAjB,CAA0BF,KAAAA,CAAAA,KAA1B,CAAN,CAAyC,CAAzC,KAAyC,CAAzC,EAT0B,eAAA,4CAAA,UAAA,CAAA,IAAA,EAAA,CAAA,CAAA,eAAA,4CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAU1B,MAAA,QAAA,CAAA,OAAA,CACA,MAAA,MAAA,CAAA,KAAA,CAX0B,aAY3B,C,kFAEU,CACT,MAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA,CACD,C,mDAEc,CACb,GAAMA,CAAAA,KAAK,CAAGG,aAAI,KAAlB,MAAcA,CAAd,CACAC,OAAO,CAAPA,GAAAA,CAAY,KAAZA,QAAAA,CAAAA,KAAAA,EACA,MAAA,CAAA,KAAA,CACD,C,2BA1BH,sB,EA6BO,QAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,KAAA,CAA6C,CAClD,GAAA,OAAA,CAAa,CACX,GAAMC,CAAAA,uBAAuB,CAAG,MAAA,CAAA,IAAA,GADrB,WACX,CAIA,GAAMC,CAAAA,kBAAkB,CACtBC,MAAM,CAANA,IAAAA,EAAeA,MAAM,CAANA,IAAAA,CAAAA,SAAAA,CAAAA,YAAAA,GADjB,YAAA,CAGA,GAAIF,uBAAuB,EAA3B,kBAAA,CAAmD,CAGjD,MAAOG,uCAAM,CACXC,qCAAK,CAAD,KAAC,CAALA,CAAc,6DAAA,CAAA,gBAASL,CAAAA,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,MAAAA,CAAAA,OAAAA,CAAAA,GAAAA,EAAAA,MAAAA,CADZ,CACYA,CAAAA,CAAT,EAAdK,CADW,CAAb,KAAa,CAAND,CAAP,CAHF,CAAA,IAOO,CACL,MAAO,IAAA,CAAA,aAAA,CAAA,OAAA,CAA2BE,yBAAlC,KAAkCA,CAA3B,CAAP,CACD,CAlB+C,CAqBlD,MAAA,CAAA,KAAA,CACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"script"}