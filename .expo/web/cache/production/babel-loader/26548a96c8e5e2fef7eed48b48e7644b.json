{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=_default;var _base=require(\"../base\");var internalTiming=(0,_base.proc)(function(clock,time,frameTime,position,finished,toValue,duration,nextProgress,progress,newFrameTime){var state={time:time,finished:finished,frameTime:frameTime,position:position};var config={duration:duration,toValue:toValue};var distanceLeft=(0,_base.sub)(config.toValue,state.position);var fullDistance=(0,_base.divide)(distanceLeft,(0,_base.sub)(1,progress));var startPosition=(0,_base.sub)(config.toValue,fullDistance);var nextPosition=(0,_base.add)(startPosition,(0,_base.multiply)(fullDistance,nextProgress));return(0,_base.block)([(0,_base.cond)((0,_base.greaterOrEq)(newFrameTime,config.duration),[(0,_base.set)(state.position,config.toValue),(0,_base.set)(state.finished,1)],(0,_base.set)(state.position,nextPosition)),(0,_base.set)(state.frameTime,newFrameTime),(0,_base.set)(state.time,clock)]);});function _default(clock,state,config){if(config.duration===0){return(0,_base.block)([(0,_base.set)(state.position,config.toValue),(0,_base.set)(state.finished,1)]);}var lastTime=(0,_base.cond)(state.time,state.time,clock);var newFrameTime=(0,_base.add)(state.frameTime,(0,_base.sub)(clock,lastTime));var nextProgress=config.easing((0,_base.divide)(newFrameTime,config.duration));var progress=config.easing((0,_base.divide)(state.frameTime,config.duration));return internalTiming(clock,state.time,state.frameTime,state.position,state.finished,config.toValue,config.duration,nextProgress,progress,newFrameTime);}","map":{"version":3,"sources":["timing.js"],"names":["internalTiming","proc","state","time","finished","frameTime","position","config","duration","toValue","distanceLeft","sub","fullDistance","divide","startPosition","nextPosition","add","multiply","block","cond","greaterOrEq","set","lastTime","newFrameTime","nextProgress","progress"],"mappings":"kFAAA,6BAYA,GAAMA,CAAAA,cAAc,CAAGC,eAAK,SAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,YAAA,CAAA,QAAA,CAAA,YAAA,CAW1B,CACA,GAAMC,CAAAA,KAAK,CAAG,CACZC,IADY,CACZA,IADY,CAEZC,QAFY,CAEZA,QAFY,CAGZC,SAHY,CAGZA,SAHY,CAIZC,QAAAA,CAAAA,QAJY,CAAd,CAOA,GAAMC,CAAAA,MAAM,CAAG,CACbC,QADa,CACbA,QADa,CAEbC,OAAAA,CAAAA,OAFa,CAAf,CAKA,GAAMC,CAAAA,YAAY,CAAGC,cAAIJ,MAAM,CAAP,OAAHI,CAAoBT,KAAK,CAA9C,QAAqBS,CAArB,CACA,GAAMC,CAAAA,YAAY,CAAGC,iBAAM,YAANA,CAAqBF,cAAG,CAAHA,CAA1C,QAA0CA,CAArBE,CAArB,CACA,GAAMC,CAAAA,aAAa,CAAGH,cAAIJ,MAAM,CAAP,OAAHI,CAAtB,YAAsBA,CAAtB,CACA,GAAMI,CAAAA,YAAY,CAAGC,cAAG,aAAHA,CAAmBC,mBAAQ,YAARA,CAAxC,YAAwCA,CAAnBD,CAArB,CAEA,MAAOE,gBAAM,CACXC,eACEC,sBAAW,YAAXA,CAA0Bb,MAAM,CAD9B,QACFa,CADFD,CAEE,CAACE,cAAInB,KAAK,CAAN,QAAHmB,CAAoBd,MAAM,CAA3B,OAACc,CAAD,CAAsCA,cAAInB,KAAK,CAAN,QAAHmB,CAFpC,CAEoCA,CAAtC,CAFFF,CAGEE,cAAInB,KAAK,CAAN,QAAHmB,CAJS,YAITA,CAHFF,CADW,CAMXE,cAAInB,KAAK,CAAN,SAAHmB,CANW,YAMXA,CANW,CAOXA,cAAInB,KAAK,CAAN,IAAHmB,CAPF,KAOEA,CAPW,CAANH,CAAP,CA7BF,CAAuBjB,CAAvB,CAwCe,kBAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAA+B,CAC5C,GAAIM,MAAM,CAANA,QAAAA,GAAJ,CAAA,CAA2B,CAEzB,MAAOW,gBAAM,CAACG,cAAInB,KAAK,CAAN,QAAHmB,CAAoBd,MAAM,CAA3B,OAACc,CAAD,CAAsCA,cAAInB,KAAK,CAAN,QAAHmB,CAAnD,CAAmDA,CAAtC,CAANH,CAAP,CACD,CACD,GAAMI,CAAAA,QAAQ,CAAGH,eAAKjB,KAAK,CAAN,IAAJiB,CAAiBjB,KAAK,CAAlB,IAAJiB,CAAjB,KAAiBA,CAAjB,CACA,GAAMI,CAAAA,YAAY,CAAGP,cAAId,KAAK,CAAN,SAAHc,CAAqBL,cAAG,KAAHA,CAA1C,QAA0CA,CAArBK,CAArB,CACA,GAAMQ,CAAAA,YAAY,CAAGjB,MAAM,CAANA,MAAAA,CAAcM,iBAAM,YAANA,CAAqBN,MAAM,CAA9D,QAAmCM,CAAdN,CAArB,CACA,GAAMkB,CAAAA,QAAQ,CAAGlB,MAAM,CAANA,MAAAA,CAAcM,iBAAOX,KAAK,CAAN,SAANW,CAAwBN,MAAM,CAA7D,QAA+BM,CAAdN,CAAjB,CACA,MAAOP,CAAAA,cAAc,CAAA,KAAA,CAEnBE,KAAK,CAFc,IAAA,CAGnBA,KAAK,CAHc,SAAA,CAInBA,KAAK,CAJc,QAAA,CAKnBA,KAAK,CALc,QAAA,CAMnBK,MAAM,CANa,OAAA,CAOnBA,MAAM,CAPa,QAAA,CAAA,YAAA,CAAA,QAAA,CAArB,YAAqB,CAArB,CAYD","sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  greaterOrEq,\n  proc,\n} from '../base';\n\nconst internalTiming = proc(function(\n  clock,\n  time,\n  frameTime,\n  position,\n  finished,\n  toValue,\n  duration,\n  nextProgress,\n  progress,\n  newFrameTime\n) {\n  const state = {\n    time,\n    finished,\n    frameTime,\n    position,\n  };\n\n  const config = {\n    duration,\n    toValue,\n  };\n\n  const distanceLeft = sub(config.toValue, state.position);\n  const fullDistance = divide(distanceLeft, sub(1, progress));\n  const startPosition = sub(config.toValue, fullDistance);\n  const nextPosition = add(startPosition, multiply(fullDistance, nextProgress));\n\n  return block([\n    cond(\n      greaterOrEq(newFrameTime, config.duration),\n      [set(state.position, config.toValue), set(state.finished, 1)],\n      set(state.position, nextPosition)\n    ),\n    set(state.frameTime, newFrameTime),\n    set(state.time, clock),\n  ]);\n});\n\nexport default function(clock, state, config) {\n  if (config.duration === 0) {\n    // when duration is zero we end the timing immediately\n    return block([set(state.position, config.toValue), set(state.finished, 1)]);\n  }\n  const lastTime = cond(state.time, state.time, clock);\n  const newFrameTime = add(state.frameTime, sub(clock, lastTime));\n  const nextProgress = config.easing(divide(newFrameTime, config.duration));\n  const progress = config.easing(divide(state.frameTime, config.duration));\n  return internalTiming(\n    clock,\n    state.time,\n    state.frameTime,\n    state.position,\n    state.finished,\n    config.toValue,\n    config.duration,\n    nextProgress,\n    progress,\n    newFrameTime\n  );\n}\n"]},"metadata":{},"sourceType":"script"}