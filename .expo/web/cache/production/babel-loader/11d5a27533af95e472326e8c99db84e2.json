{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createNativeWrapper;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _react=_interopRequireDefault(require(\"react\"));var _NativeViewGestureHandler=_interopRequireDefault(require(\"./NativeViewGestureHandler\"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var NATIVE_WRAPPER_PROPS_FILTER=['id','minPointers','enabled','waitFor','simultaneousHandlers','shouldCancelWhenOutside','hitSlop','onGestureEvent','onHandlerStateChange','onBegan','onFailed','onCancelled','onActivated','onEnded','shouldActivateOnStart','disallowInterruption','onGestureHandlerEvent','onGestureHandlerStateChange'];function createNativeWrapper(Component){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var ComponentWrapper=_react.default.forwardRef(function(props,ref){var gestureHandlerProps=Object.keys(props).reduce(function(res,key){if(NATIVE_WRAPPER_PROPS_FILTER.indexOf(key)!==-1){res[key]=props[key];}return res;},_objectSpread({},config));return _react.default.createElement(_NativeViewGestureHandler.default,gestureHandlerProps,_react.default.createElement(Component,(0,_extends2.default)({},props,{ref:ref})));});ComponentWrapper.propTypes=_objectSpread({},Component.propTypes);ComponentWrapper.displayName=Component.displayName||'ComponentWrapper';return ComponentWrapper;}","map":{"version":3,"sources":["C:/Users/Parth Patel/Desktop/expenseTracker/node_modules/react-native-gesture-handler/createNativeWrapper.js"],"names":["NATIVE_WRAPPER_PROPS_FILTER","createNativeWrapper","Component","config","ComponentWrapper","React","forwardRef","props","ref","gestureHandlerProps","Object","keys","reduce","res","key","indexOf","propTypes","displayName"],"mappings":"8VAAA,oDAEA,4F,yyBASA,GAAMA,CAAAA,2BAA2B,CAAG,CAClC,IADkC,CAElC,aAFkC,CAGlC,SAHkC,CAIlC,SAJkC,CAKlC,sBALkC,CAMlC,yBANkC,CAOlC,SAPkC,CAQlC,gBARkC,CASlC,sBATkC,CAUlC,SAVkC,CAWlC,UAXkC,CAYlC,aAZkC,CAalC,aAbkC,CAclC,SAdkC,CAelC,uBAfkC,CAgBlC,sBAhBkC,CAiBlC,uBAjBkC,CAkBlC,6BAlBkC,CAApC,CAqBe,QAASC,CAAAA,mBAAT,CAA6BC,SAA7B,CAAqD,IAAbC,CAAAA,MAAa,2DAAJ,EAAI,CAClE,GAAMC,CAAAA,gBAAgB,CAAGC,eAAMC,UAAN,CAAiB,SAACC,KAAD,CAAQC,GAAR,CAAgB,CAExD,GAAMC,CAAAA,mBAAmB,CAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAC1B,SAACC,GAAD,CAAMC,GAAN,CAAc,CACZ,GAAId,2BAA2B,CAACe,OAA5B,CAAoCD,GAApC,IAA6C,CAAC,CAAlD,CAAqD,CACnDD,GAAG,CAACC,GAAD,CAAH,CAAWP,KAAK,CAACO,GAAD,CAAhB,CACD,CACD,MAAOD,CAAAA,GAAP,CACD,CANyB,kBAOrBV,MAPqB,EAA5B,CASA,MACE,8BAAC,iCAAD,CAA8BM,mBAA9B,CACE,6BAAC,SAAD,0BAAeF,KAAf,EAAsB,GAAG,CAAEC,GAA3B,GADF,CADF,CAKD,CAhBwB,CAAzB,CAkBAJ,gBAAgB,CAACY,SAAjB,kBACKd,SAAS,CAACc,SADf,EAGAZ,gBAAgB,CAACa,WAAjB,CAA+Bf,SAAS,CAACe,WAAV,EAAyB,kBAAxD,CAEA,MAAOb,CAAAA,gBAAP,CACD","sourcesContent":["import React from 'react';\n\nimport NativeViewGestureHandler from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  'id',\n  'minPointers',\n  'enabled',\n  'waitFor',\n  'simultaneousHandlers',\n  'shouldCancelWhenOutside',\n  'hitSlop',\n  'onGestureEvent',\n  'onHandlerStateChange',\n  'onBegan',\n  'onFailed',\n  'onCancelled',\n  'onActivated',\n  'onEnded',\n  'shouldActivateOnStart',\n  'disallowInterruption',\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n];\n\nexport default function createNativeWrapper(Component, config = {}) {\n  const ComponentWrapper = React.forwardRef((props, ref) => {\n    // filter out props that should be passed to gesture handler wrapper\n    const gestureHandlerProps = Object.keys(props).reduce(\n      (res, key) => {\n        if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {\n          res[key] = props[key];\n        }\n        return res;\n      },\n      { ...config } // watch out not to modify config\n    );\n    return (\n      <NativeViewGestureHandler {...gestureHandlerProps}>\n        <Component {...props} ref={ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  ComponentWrapper.propTypes = {\n    ...Component.propTypes,\n  };\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"]},"metadata":{},"sourceType":"script"}