{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=interpolate;exports.Extrapolate=void 0;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _operators=require(\"../operators\");var _invariant=_interopRequireDefault(require(\"fbjs/lib/invariant\"));var _AnimatedNode=_interopRequireDefault(require(\"../core/AnimatedNode\"));var _AnimatedCond=require(\"../core/AnimatedCond\");var _AnimatedFunction=require(\"../core/AnimatedFunction\");function _createForOfIteratorHelperLoose(o,allowArrayLike){var it;if(typeof Symbol===\"undefined\"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}it=o[Symbol.iterator]();return it.next.bind(it);}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}var interpolateInternalSingleProc=(0,_AnimatedFunction.createAnimatedFunction)(function(value,inS,inE,outS,outE){var progress=(0,_operators.divide)((0,_operators.sub)(value,inS),(0,_operators.sub)(inE,inS));var resultForNonZeroRange=(0,_operators.add)(outS,(0,_operators.multiply)(progress,(0,_operators.sub)(outE,outS)));var result=(0,_AnimatedCond.createAnimatedCond)((0,_operators.eq)(inS,inE),(0,_AnimatedCond.createAnimatedCond)((0,_operators.lessOrEq)(value,inS),outS,outE),resultForNonZeroRange);return result;});function interpolateInternalSingle(value,inputRange,outputRange,offset){var inS=inputRange[offset];var inE=inputRange[offset+1];var outS=outputRange[offset];var outE=outputRange[offset+1];return interpolateInternalSingleProc(value,inS,inE,outS,outE);}function interpolateInternal(value,inputRange,outputRange){var offset=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;if(inputRange.length-offset===2){return interpolateInternalSingle(value,inputRange,outputRange,offset);}return(0,_AnimatedCond.createAnimatedCond)((0,_operators.lessThan)(value,inputRange[offset+1]),interpolateInternalSingle(value,inputRange,outputRange,offset),interpolateInternal(value,inputRange,outputRange,offset+1));}var Extrapolate={EXTEND:'extend',CLAMP:'clamp',IDENTITY:'identity'};exports.Extrapolate=Extrapolate;function checkNonDecreasing(name,arr){for(var i=1;i<arr.length;++i){if(arr[i]instanceof _AnimatedNode.default||arr[i-1]instanceof _AnimatedNode.default)continue;(0,_invariant.default)(arr[i]>=arr[i-1],'%s must be monotonically non-decreasing. (%s)',name,arr);}}function checkMinElements(name,arr){(0,_invariant.default)(arr.length>=2,'%s must have at least 2 elements. (%s)',name,arr);}function checkValidNumbers(name,arr){for(var i=0;i<arr.length;i++){if(arr[i]instanceof _AnimatedNode.default||typeof arr[i]!=='number')continue;(0,_invariant.default)(Number.isFinite(arr[i]),'%s cannot include %s. (%s)',name,arr[i],arr);}}function convertToRadians(outputRange){for(var _iterator=_createForOfIteratorHelperLoose(outputRange.entries()),_step;!(_step=_iterator()).done;){var _ref=_step.value;var _ref2=(0,_slicedToArray2.default)(_ref,2);var i=_ref2[0];var value=_ref2[1];if(typeof value==='string'&&value.endsWith('deg')){outputRange[i]=parseFloat(value)*(Math.PI/180);}}}function interpolate(value,config){var inputRange=config.inputRange,outputRange=config.outputRange,_config$extrapolate=config.extrapolate,extrapolate=_config$extrapolate===void 0?Extrapolate.EXTEND:_config$extrapolate,extrapolateLeft=config.extrapolateLeft,extrapolateRight=config.extrapolateRight;checkMinElements('inputRange',inputRange);checkValidNumbers('inputRange',inputRange);checkMinElements('outputRange',outputRange);checkValidNumbers('outputRange',outputRange);checkNonDecreasing('inputRange',inputRange);(0,_invariant.default)(inputRange.length===outputRange.length,'inputRange and outputRange must be the same length.');convertToRadians(outputRange);var left=extrapolateLeft||extrapolate;var right=extrapolateRight||extrapolate;var output=interpolateInternal(value,inputRange,outputRange);if(left===Extrapolate.EXTEND){}else if(left===Extrapolate.CLAMP){output=(0,_AnimatedCond.createAnimatedCond)((0,_operators.lessThan)(value,inputRange[0]),outputRange[0],output);}else if(left===Extrapolate.IDENTITY){output=(0,_AnimatedCond.createAnimatedCond)((0,_operators.lessThan)(value,inputRange[0]),value,output);}if(right===Extrapolate.EXTEND){}else if(right===Extrapolate.CLAMP){output=(0,_AnimatedCond.createAnimatedCond)((0,_operators.greaterThan)(value,inputRange[inputRange.length-1]),outputRange[outputRange.length-1],output);}else if(right===Extrapolate.IDENTITY){output=(0,_AnimatedCond.createAnimatedCond)((0,_operators.greaterThan)(value,inputRange[inputRange.length-1]),value,output);}return output;}","map":{"version":3,"sources":["interpolate.js"],"names":["interpolateInternalSingleProc","proc","progress","divide","sub","resultForNonZeroRange","add","multiply","result","cond","eq","lessOrEq","inS","inputRange","inE","offset","outS","outputRange","outE","interpolateInternalSingle","lessThan","interpolateInternal","Extrapolate","EXTEND","CLAMP","IDENTITY","i","arr","invariant","Number","value","parseFloat","Math","extrapolate","extrapolateRight","checkMinElements","checkValidNumbers","checkNonDecreasing","convertToRadians","left","extrapolateLeft","right","output","greaterThan"],"mappings":"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","sourcesContent":["import {\n  lessThan,\n  multiply,\n  sub,\n  add,\n  divide,\n  greaterThan,\n  lessOrEq,\n  eq,\n} from '../operators';\nimport invariant from 'fbjs/lib/invariant';\n\nimport AnimatedNode from '../core/AnimatedNode';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\nimport { createAnimatedFunction as proc } from '../core/AnimatedFunction';\n\nconst interpolateInternalSingleProc = proc(function(\n  value,\n  inS,\n  inE,\n  outS,\n  outE\n) {\n  const progress = divide(sub(value, inS), sub(inE, inS));\n  // logic below was made in order to provide a compatibility witn an Animated API\n  const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));\n  const result = cond(\n    eq(inS, inE),\n    cond(lessOrEq(value, inS), outS, outE),\n    resultForNonZeroRange\n  );\n  return result;\n});\n\nfunction interpolateInternalSingle(value, inputRange, outputRange, offset) {\n  const inS = inputRange[offset];\n  const inE = inputRange[offset + 1];\n  const outS = outputRange[offset];\n  const outE = outputRange[offset + 1];\n  return interpolateInternalSingleProc(value, inS, inE, outS, outE);\n}\n\nfunction interpolateInternal(value, inputRange, outputRange, offset = 0) {\n  if (inputRange.length - offset === 2) {\n    return interpolateInternalSingle(value, inputRange, outputRange, offset);\n  }\n  return cond(\n    lessThan(value, inputRange[offset + 1]),\n    interpolateInternalSingle(value, inputRange, outputRange, offset),\n    interpolateInternal(value, inputRange, outputRange, offset + 1)\n  );\n}\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nfunction checkNonDecreasing(name, arr) {\n  for (let i = 1; i < arr.length; ++i) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)\n      continue;\n    invariant(\n      arr[i] >= arr[i - 1],\n      '%s must be monotonically non-decreasing. (%s)',\n      name,\n      arr\n    );\n  }\n}\n\nfunction checkMinElements(name, arr) {\n  invariant(\n    arr.length >= 2,\n    '%s must have at least 2 elements. (%s)',\n    name,\n    arr\n  );\n}\n\nfunction checkValidNumbers(name, arr) {\n  for (let i = 0; i < arr.length; i++) {\n    // We can't validate animated nodes in JS.\n    if (arr[i] instanceof AnimatedNode || typeof arr[i] !== 'number') continue;\n    invariant(\n      Number.isFinite(arr[i]),\n      '%s cannot include %s. (%s)',\n      name,\n      arr[i],\n      arr\n    );\n  }\n}\n\nfunction convertToRadians(outputRange) {\n  for (const [i, value] of outputRange.entries()) {\n    if (typeof value === 'string' && value.endsWith('deg')) {\n      outputRange[i] = parseFloat(value) * (Math.PI / 180);\n    }\n  }\n}\n\nexport default function interpolate(value, config) {\n  const {\n    inputRange,\n    outputRange,\n    extrapolate = Extrapolate.EXTEND,\n    extrapolateLeft,\n    extrapolateRight,\n  } = config;\n\n  checkMinElements('inputRange', inputRange);\n  checkValidNumbers('inputRange', inputRange);\n  checkMinElements('outputRange', outputRange);\n  checkValidNumbers('outputRange', outputRange);\n  checkNonDecreasing('inputRange', inputRange);\n  invariant(\n    inputRange.length === outputRange.length,\n    'inputRange and outputRange must be the same length.'\n  );\n\n  convertToRadians(outputRange);\n  const left = extrapolateLeft || extrapolate;\n  const right = extrapolateRight || extrapolate;\n  let output = interpolateInternal(value, inputRange, outputRange);\n\n  if (left === Extrapolate.EXTEND) {\n  } else if (left === Extrapolate.CLAMP) {\n    output = cond(lessThan(value, inputRange[0]), outputRange[0], output);\n  } else if (left === Extrapolate.IDENTITY) {\n    output = cond(lessThan(value, inputRange[0]), value, output);\n  }\n\n  if (right === Extrapolate.EXTEND) {\n  } else if (right === Extrapolate.CLAMP) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      outputRange[outputRange.length - 1],\n      output\n    );\n  } else if (right === Extrapolate.IDENTITY) {\n    output = cond(\n      greaterThan(value, inputRange[inputRange.length - 1]),\n      value,\n      output\n    );\n  }\n\n  return output;\n}\n"]},"metadata":{},"sourceType":"script"}