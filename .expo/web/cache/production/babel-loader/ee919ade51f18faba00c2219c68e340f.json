{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _base=require(\"./base\");var _AnimatedBezier=_interopRequireDefault(require(\"./core/AnimatedBezier\"));var Easing=function(){function Easing(){(0,_classCallCheck2.default)(this,Easing);}(0,_createClass2.default)(Easing,null,[{key:\"linear\",value:function linear(t){return t;}},{key:\"ease\",value:function ease(t){return new _AnimatedBezier.default(t,0.42,0,1,1);}},{key:\"quad\",value:function quad(t){return(0,_base.multiply)(t,t);}},{key:\"cubic\",value:function cubic(t){return(0,_base.multiply)(t,t,t);}},{key:\"poly\",value:function poly(n){return function(t){return(0,_base.pow)(t,n);};}},{key:\"sin\",value:function sin(t){return(0,_base.sub)(1,(0,_base.cos)((0,_base.multiply)(t,Math.PI,0.5)));}},{key:\"circle\",value:function circle(t){return(0,_base.sub)(1,(0,_base.sqrt)((0,_base.sub)(1,(0,_base.multiply)(t,t))));}},{key:\"exp\",value:function exp(t){return(0,_base.pow)(2,(0,_base.multiply)(10,(0,_base.sub)(t,1)));}},{key:\"elastic\",value:function elastic(){var bounciness=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var p=bounciness*Math.PI;return function(t){return(0,_base.sub)(1,(0,_base.multiply)((0,_base.pow)((0,_base.cos)((0,_base.multiply)(t,Math.PI,0.5)),3),(0,_base.cos)((0,_base.multiply)(t,p))));};}},{key:\"back\",value:function back(s){if(s===undefined){s=1.70158;}return function(t){return(0,_base.multiply)(t,t,(0,_base.sub)((0,_base.multiply)((0,_base.add)(s,1),t),s));};}},{key:\"bounce\",value:function bounce(t){var sq=function sq(v){return(0,_base.multiply)(7.5625,v,v);};return(0,_base.cond)((0,_base.lessThan)(t,1/2.75),sq(t),(0,_base.cond)((0,_base.lessThan)(t,2/2.75),(0,_base.add)(0.75,sq((0,_base.sub)(t,1.5/2.75))),(0,_base.cond)((0,_base.lessThan)(t,2.5/2.76),(0,_base.add)(0.9375,sq((0,_base.sub)(t,2.25/2.75))),(0,_base.add)(0.984375,sq((0,_base.sub)(t,2.625/2.75))))));}},{key:\"bezier\",value:function bezier(x1,y1,x2,y2){return function(t){return new _AnimatedBezier.default(t,x1,y1,x2,y2);};}},{key:\"in\",value:function _in(easing){return easing;}},{key:\"out\",value:function out(easing){return function(t){return(0,_base.sub)(1,easing((0,_base.sub)(1,t)));};}},{key:\"inOut\",value:function inOut(easing){return function(t){return(0,_base.cond)((0,_base.lessThan)(t,0.5),(0,_base.divide)(easing((0,_base.multiply)(t,2)),2),(0,_base.sub)(1,(0,_base.divide)(easing((0,_base.multiply)((0,_base.sub)(1,t),2)),2)));};}}]);return Easing;}();exports.default=Easing;","map":{"version":3,"sources":["Easing.js"],"names":["multiply","t","pow","sub","cos","Math","sqrt","bounciness","p","s","add","sq","v","cond","lessThan","easing","divide"],"mappings":"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","sourcesContent":["import {\n  cond,\n  lessThan,\n  multiply,\n  pow,\n  cos,\n  sqrt,\n  sub,\n  add,\n  divide,\n} from './base';\nimport AnimatedBezier from './core/AnimatedBezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nexport default class Easing {\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t) {\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t) {\n    return multiply(t, t);\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t) {\n    return multiply(t, t, t);\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n) {\n    return t => pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t) {\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t) {\n    return sub(1, sqrt(sub(1, multiply(t, t))));\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t) {\n    return pow(2, multiply(10, sub(t, 1)));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  static elastic(bounciness = 1) {\n    const p = bounciness * Math.PI;\n    return t =>\n      sub(\n        1,\n        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))\n      );\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return t => multiply(t, t, sub(multiply(add(s, 1), t), s));\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t) {\n    const sq = v => multiply(7.5625, v, v);\n    return cond(\n      lessThan(t, 1 / 2.75),\n      sq(t),\n      cond(\n        lessThan(t, 2 / 2.75),\n        add(0.75, sq(sub(t, 1.5 / 2.75))),\n        cond(\n          lessThan(t, 2.5 / 2.76),\n          add(0.9375, sq(sub(t, 2.25 / 2.75))),\n          add(0.984375, sq(sub(t, 2.625 / 2.75)))\n        )\n      )\n    );\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(x1, y1, x2, y2) {\n    return t => new AnimatedBezier(t, x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(easing) {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(easing) {\n    return t => sub(1, easing(sub(1, t)));\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(easing) {\n    return t =>\n      cond(\n        lessThan(t, 0.5),\n        divide(easing(multiply(t, 2)), 2),\n        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}